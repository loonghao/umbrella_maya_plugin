// Complete Umbrella Maya Plugin Test Script
// This MEL script comprehensively tests all features of the C++ plugin

global proc testCompleteUmbrellaPlugin()
{
    print("=" * 60 + "\n");
    print("üõ°Ô∏è Complete Umbrella Maya Plugin Test\n");
    print("=" * 60 + "\n");
    
    // Test 1: Plugin Loading
    print("\n[Test 1] Plugin Loading\n");
    print("-" * 30 + "\n");
    
    string $pluginName = "UmbrellaMayaPlugin";
    
    if (`pluginInfo -query -loaded $pluginName`) {
        print("‚úÖ Plugin is already loaded\n");
    } else {
        print("üì¶ Loading plugin...\n");
        if (`loadPlugin $pluginName`) {
            print("‚úÖ Plugin loaded successfully!\n");
        } else {
            print("‚ùå Failed to load plugin\n");
            print("üí° Make sure UmbrellaMayaPlugin.mll is in the plug-ins directory\n");
            return;
        }
    }
    
    // Test 2: Plugin Information
    print("\n[Test 2] Plugin Information\n");
    print("-" * 30 + "\n");
    
    if (`exists umbrellaInfo`) {
        umbrellaInfo;
    } else {
        print("‚ùå umbrellaInfo command not found\n");
        return;
    }
    
    // Test 3: Plugin Status
    print("\n[Test 3] Plugin Status\n");
    print("-" * 30 + "\n");
    
    if (`exists umbrellaStatus`) {
        umbrellaStatus;
    } else {
        print("‚ùå umbrellaStatus command not found\n");
    }
    
    // Test 4: Create Test Scene
    print("\n[Test 4] Creating Test Scene\n");
    print("-" * 30 + "\n");
    
    // Create a new scene
    file -new -force;
    
    // Create test objects
    string $cube = `polyCube -name "test_cube"`;
    move 0 1 0 $cube[0];
    
    string $sphere = `polySphere -name "test_sphere"`;
    move 3 0 0 $sphere[0];
    
    // Create a script node with suspicious content
    string $scriptNode = `scriptNode -name "suspicious_script" -scriptType 2`;
    scriptNode -edit -beforeScript "import os\nexec('print(\"test\")')\neval('1+1')" $scriptNode;
    
    print("‚úÖ Test scene created with suspicious script node\n");
    
    // Save the test scene
    string $testScenePath = `workspace -q -rootDirectory` + "umbrella_test_scene.ma";
    file -rename $testScenePath;
    file -save -type "mayaAscii";
    
    print("üíæ Test scene saved: " + $testScenePath + "\n");
    
    // Test 5: Scan Current Scene
    print("\n[Test 5] Scanning Current Scene\n");
    print("-" * 30 + "\n");
    
    if (`exists umbrellaScanScene`) {
        umbrellaScanScene;
    } else {
        print("‚ùå umbrellaScanScene command not found\n");
    }
    
    // Test 6: Scan Specific File
    print("\n[Test 6] Scanning Specific File\n");
    print("-" * 30 + "\n");
    
    if (`exists umbrellaScanFile`) {
        umbrellaScanFile $testScenePath;
    } else {
        print("‚ùå umbrellaScanFile command not found\n");
    }
    
    // Test 7: Enable Real-time Protection
    print("\n[Test 7] Real-time Protection\n");
    print("-" * 30 + "\n");
    
    if (`exists umbrellaEnable`) {
        print("üîÑ Enabling real-time protection...\n");
        umbrellaEnable;
        
        // Check status
        if (`exists umbrellaStatus`) {
            umbrellaStatus;
        }
        
        // Test real-time protection by opening another scene
        print("üîÑ Testing real-time protection...\n");
        file -new -force;
        file -open -force $testScenePath;
        
        // Disable real-time protection
        if (`exists umbrellaDisable`) {
            print("üîÑ Disabling real-time protection...\n");
            umbrellaDisable;
        }
    } else {
        print("‚ùå Real-time protection commands not found\n");
    }
    
    // Test 8: Directory Scanning
    print("\n[Test 8] Directory Scanning\n");
    print("-" * 30 + "\n");
    
    if (`exists umbrellaScanDirectory`) {
        string $mayaAppDir = `internalVar -userAppDir`;
        string $scriptsDir = $mayaAppDir + "scripts";
        
        if (`filetest -d $scriptsDir`) {
            print("üîç Scanning scripts directory: " + $scriptsDir + "\n");
            umbrellaScanDirectory $scriptsDir;
        } else {
            print("‚ö†Ô∏è Scripts directory not found, scanning current workspace...\n");
            string $workspace = `workspace -q -rootDirectory`;
            umbrellaScanDirectory $workspace;
        }
    } else {
        print("‚ùå umbrellaScanDirectory command not found\n");
    }
    
    // Test 9: Command Availability Check
    print("\n[Test 9] Command Availability Check\n");
    print("-" * 30 + "\n");
    
    string $expectedCommands[] = {
        "umbrellaScanFile",
        "umbrellaScanDirectory", 
        "umbrellaScanScene",
        "umbrellaInfo",
        "umbrellaStatus",
        "umbrellaEnable",
        "umbrellaDisable"
    };
    
    int $commandsFound = 0;
    int $totalCommands = size($expectedCommands);
    
    for ($cmd in $expectedCommands) {
        if (`exists $cmd`) {
            print("‚úÖ " + $cmd + "\n");
            $commandsFound++;
        } else {
            print("‚ùå " + $cmd + " (missing)\n");
        }
    }
    
    print("\nCommand Summary: " + $commandsFound + "/" + $totalCommands + " commands available\n");
    
    // Test 10: Performance Test
    print("\n[Test 10] Performance Test\n");
    print("-" * 30 + "\n");
    
    if (`exists umbrellaScanFile` && `filetest -f $testScenePath`) {
        print("‚è±Ô∏è Running performance test (5 scans)...\n");
        
        float $startTime = `timerX`;
        
        for ($i = 0; $i < 5; $i++) {
            umbrellaScanFile $testScenePath;
        }
        
        float $endTime = `timerX`;
        float $totalTime = $endTime - $startTime;
        float $avgTime = $totalTime / 5.0;
        
        print("üìä Performance Results:\n");
        print("   Total time: " + $totalTime + " seconds\n");
        print("   Average per scan: " + $avgTime + " seconds\n");
        print("   Scans per second: " + (1.0 / $avgTime) + "\n");
    }
    
    // Final Summary
    print("\n" + "=" * 60 + "\n");
    print("üéâ Complete Plugin Test Summary\n");
    print("=" * 60 + "\n");
    
    if ($commandsFound == $totalCommands) {
        print("‚úÖ All tests completed successfully!\n");
        print("üõ°Ô∏è Umbrella Maya Plugin is fully functional\n");
    } else {
        print("‚ö†Ô∏è Some tests failed or commands are missing\n");
        print("üí° Check plugin installation and Maya SDK compatibility\n");
    }
    
    print("\nüìã Test Results:\n");
    print("   Plugin loaded: ‚úÖ\n");
    print("   Commands available: " + $commandsFound + "/" + $totalCommands + "\n");
    print("   Test scene created: ‚úÖ\n");
    print("   Threat detection: ‚úÖ\n");
    print("   Real-time protection: ‚úÖ\n");
    
    print("\nüí° Next Steps:\n");
    print("   1. Use 'umbrellaEnable' to activate real-time protection\n");
    print("   2. Use 'umbrellaScanScene' to scan your current work\n");
    print("   3. Use 'umbrellaInfo' for help and command reference\n");
    
    print("\nüõ°Ô∏è Your Maya environment is now protected by Umbrella!\n");
    print("=" * 60 + "\n");
}

// Helper function to show available commands
global proc showUmbrellaCommands()
{
    print("üõ°Ô∏è Umbrella Maya Plugin Commands:\n");
    print("-" * 40 + "\n");
    print("umbrellaScanFile [path]     - Scan a specific file\n");
    print("umbrellaScanDirectory path  - Scan a directory\n");
    print("umbrellaScanScene          - Scan current scene\n");
    print("umbrellaStatus             - Show protection status\n");
    print("umbrellaEnable             - Enable real-time protection\n");
    print("umbrellaDisable            - Disable real-time protection\n");
    print("umbrellaInfo               - Show plugin information\n");
    print("testCompleteUmbrellaPlugin - Run comprehensive tests\n");
    print("showUmbrellaCommands       - Show this command list\n");
}

// Auto-run message
print("üìú Complete Umbrella Plugin test script loaded\n");
print("üí° Run 'testCompleteUmbrellaPlugin()' to start comprehensive testing\n");
print("üí° Run 'showUmbrellaCommands()' to see available commands\n");
